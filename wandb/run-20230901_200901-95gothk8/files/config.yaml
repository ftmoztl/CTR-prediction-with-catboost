wandb_version: 1

depth:
  desc: null
  value: 10
iterations:
  desc: null
  value: 313
learning_rate:
  desc: null
  value: 0.029159544875852175
min_data_in_leaf:
  desc: null
  value: 69
rsm:
  desc: null
  value: 0.5180180503203037
subsample:
  desc: null
  value: 0.9585264947969512
_name:
  desc: null
  value: wandb.config
__doc__:
  desc: null
  value: "Config object.\n\n    Config objects are intended to hold all of the hyperparameters\
    \ associated with\n    a wandb run and are saved with the run object when `wandb.init`\
    \ is called.\n\n    We recommend setting `wandb.config` once at the top of your\
    \ training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\
    \n    You can create a file called `config-defaults.yaml`, and it will automatically\
    \ be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\
    \n    You can also load a config YAML file with your custom name and pass the\
    \ filename\n    into `wandb.init(config=\"special_config.yaml\")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\
    \n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs\
    \ = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n  \
    \          # train\n        ```\n\n        Using wandb.init to set config\n  \
    \      ```\n        wandb.init(config={\"epochs\": 4, \"batch_size\": 32})\n \
    \       for x in range(wandb.config.epochs):\n            # train\n        ```\n\
    \n        Nested configs\n        ```\n        wandb.config['train']['epochs']\
    \ = 4\n        wandb.init()\n        for x in range(wandb.config['train']['epochs']):\n\
    \            # train\n        ```\n\n        Using absl flags\n        ```\n \
    \       flags.DEFINE_string(‘model’, None, ‘model to run’) # name, default, help\n\
    \        wandb.config.update(flags.FLAGS) # adds all absl flags to config\n  \
    \      ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n\
    \        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n\
    \        parser.add_argument(\n            \"-b\",\n            \"--batch-size\"\
    ,\n            type=int,\n            default=8,\n            metavar=\"N\",\n\
    \            help=\"input batch size for training (default: 8)\",\n        )\n\
    \        args = parser.parse_args()\n        wandb.config.update(args)\n     \
    \   ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n    \
    \    ```python\n        flags = tf.app.flags\n        flags.DEFINE_string(\"data_dir\"\
    , \"/tmp/data\")\n        flags.DEFINE_integer(\"batch_size\", 128, \"Batch size.\"\
    )\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags\
    \ to config\n        ```\n    "
_wandb:
  desc: null
  value:
    python_version: 3.11.2
    cli_version: 0.15.9
    framework: catboost
    is_jupyter_run: true
    is_kaggle_kernel: false
    start_time: 1693588141.304976
    t:
      1:
      - 5
      - 7
      - 53
      - 55
      2:
      - 5
      - 7
      - 53
      - 55
      3:
      - 2
      - 16
      - 23
      - 37
      4: 3.11.2
      5: 0.15.9
      8:
      - 1
      - 4
      - 5
